---
- name: Run terraform destroy for components
  command: terraform destroy -auto-approve
  args:
    chdir: "{{ terraform_dir }}/{{ component_name }}"
  register: terraform_destroy
  changed_when: >-
    "Resources: 0 added, 0 changed, 0 destroyed." not in terraform_destroy.stdout
  with_items:
  - public-load-balancer
  - router
  loop_control:
    loop_var: component_name
  when: >-
    component_name in terraform_components

- name: Run terraform destroy for node-group components
  command: terraform destroy -auto-approve
  args:
    chdir: "{{ terraform_template_dir }}"
  with_dict: "{{ demo_openshift_node_groups }}"
  loop_control:
    loop_var: node_group_item
  vars:
    node_group: "{{ node_group_item.value }}"
    node_group_name: "{{ node_group_item.key }}"
    terraform_template_dir: "{{ terraform_dir }}/node-group-{{ node_group_name }}"
  when:
  - not node_group.static_node_group|default(false)|bool
  - >-
    'node-group-' ~ node_group_name in terraform_components or
    'node-groups' in terraform_components
  # Terraform template management sometimes fails because it attempts template
  # delete before the instance group updates have completed, so retry
  register: terraform_destroy
  until: terraform_destroy.rc == 0
  retries: 2
  delay: 5

- name: Run terraform destroy for components
  command: terraform destroy -auto-approve
  args:
    chdir: "{{ terraform_dir }}/{{ component_name }}"
  register: terraform_destroy
  changed_when: >-
    "Resources: 0 added, 0 changed, 0 destroyed." not in terraform_destroy.stdout
  with_items:
  - image-node
  - masters
  - registry-storage
  - service-accounts
  - controller
  - network
  loop_control:
    loop_var: component_name
  when: >-
    component_name in terraform_components
