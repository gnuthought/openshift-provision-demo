---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-cluster-autoscaler
  labels:
    name: kube-cluster-autoscaler
spec:
  replicas: 1
  selector:
    matchLabels:
      name: kube-cluster-autoscaler
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: kube-cluster-autoscaler
    spec:
      containers:
      - command:
        - /usr/bin/cluster-autoscaler
        - --balance-similar-node-groups
        - --logtostderr
        - --namespace=kube-cluster-autoscaler
        - --write-status-configmap=true
{% for node_group_name, node_group in demo_openshift_node_groups.items() %}
{%   if 'minimum_instance_count' in node_group and 'maximum_instance_count' in node_group %}
{%     if demo_cloud_provider == 'gcp' %}
{%       set gcp_zones = node_group.gcp_zones | default(demo_gcp_zones) %}
{%       set outer_loop_last = loop.last %}
{%       for gcp_zone in gcp_zones %}
{%         set instance_group_name = openshift_gcp_prefix ~ node_group_name ~ gcp_zone[-2:] %}
{%         set zone_max = ((node_group.maximum_instance_count + gcp_zones|length - loop.index) / gcp_zones|length) | int %}
{%         set zone_min = ((node_group.minimum_instance_count + gcp_zones|length - loop.index) / gcp_zones|length) | int %}
        - "--nodes={{ zone_min }}:{{ zone_max }}:https://www.googleapis.com/compute/v1/projects/{{ openshift_provision_cluster_vars.gcp_project }}/zones/{{ gcp_zone }}/instanceGroups/{{ instance_group_name }}"
{%       endfor %}
{%     endif %}
{%   endif %}
{% endfor %}
        env:
        - name: LOG_OUTPUT
          value: /dev/stdout
        image: {{ demo_cluster_autoscaler_image }}
        imagePullPolicy: {{ demo_cluster_autoscaler_image_pull_policy }}
        name: kube-cluster-autoscaler
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
